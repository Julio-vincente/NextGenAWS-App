name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  Register-Image:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get-commit.outputs.hash }}
    steps:
      # 1. Checkout do código
      - name: Checkout mode
        uses: actions/checkout@v2

      # 2. Login no Amazon ECR
      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      # 3. Obter hash curto do commit
      - name: Get short commit hash
        id: get-commit
        run: |
          calculatedSha=$(git rev-parse --short "${{ github.sha }}")
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      # 4. 
      - name: Build and push Docker image
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          REPOSITORY_URI: ${{ secrets.ECR_URI }}
        run: |
          cd Docker
          IMAGE_TAG=${COMMIT_SHORT_SHA:-dev}
          docker build -t $REPOSITORY_URI:$IMAGE_TAG .
          docker push $REPOSITORY_URI:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  Scan-Container:
    runs-on: ubuntu-latest
    needs: Register-Image
    steps:

      # 1. Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Instalação do Snyk CLI
      - name: Install and auth Snyk CLI
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install -g snyk
          snyk auth "$SNYK_TOKEN"

      # 3. Login no Amazon ECR
      - name: Log in Amazon
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}
          
      # 4. Obter o hash curto do commit
      - name: Get short commit hash
        id: get-commit
        run: |
          calculatedSha=$(git rev-parse --short "${{ github.sha }}")
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      # 5. Executar o Snyk Scan no container
      - name: Snyk Docker Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          REPOSITORY_URI: ${{ secrets.ECR_URI }}
        run: |
          IMAGE_TAG=${COMMIT_SHORT_SHA:-dev}
          snyk container test $REPOSITORY_URI:$IMAGE_TAG

  update-ecs:
    runs-on: ubuntu-latest
    needs: Register-Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in Amazon
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get short commit hash
        id: get-commit
        run: |
          calculatedSha=$(git rev-parse --short "${{ github.sha }}")
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Replace environment variables in task definition
        run: |
            echo "Replacing environment variables in task definition..."
            IMAGE_TAG=${COMMIT_SHORT_SHA:-dev}
            sed -i "s|\${ECR_URI}|${{ secrets.ECR_URI }}|g" ecs/task-definition.json
            sed -i "s|\${NEW_IMAGE_TAG}|${{ secrets.ECR_URI }}|g" ecs/task-definition.json
            sed -i "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" ecs/task-definition.json
            sed -i "s|\${DB_HOST}|${{ secrets.DB_HOST }}|g" ecs/task-definition.json
            sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" ecs/task-definition.json
            sed -i "s|\${DB_PASSWORD}|${{ secrets.DB_PASSWORD }}|g" ecs/task-definition.json
  
      - name: Register Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://ecs/task-definition.json

      - name: Get the Latest Task Definition ARN
        run: |
          # Get the latest task definition ARN
          NEW_TASK_DEF=$(aws ecs list-task-definitions --family-prefix ProdCluster --sort DESC --query "taskDefinitionArns[0]" --output text)
          echo "New Task Definition ARN: $NEW_TASK_DEF"
        
          # Set the task definition ARN as output for subsequent steps
          echo "NEW_TASK_DEF=$NEW_TASK_DEF" >> $GITHUB_ENV
        
      - name: Update ECS Service
        run: |
          echo "Updating ECS service with task definition ARN: $NEW_TASK_DEF"
          aws ecs update-service \
            --cluster ProdCluster \
            --service service_app \
            --task-definition $NEW_TASK_DEF

      - name: Verify Service Update
        run: |
          aws ecs describe-services \
            --cluster ProdCluster \
            --services my-service

  verify-deployment:
    runs-on: ubuntu-latest
    needs: update-ecs
    steps:
      # 1. Verificar estado do serviço no ECS
      - name: Verify ECS Deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          echo "Verificando ECS Service Deployment..."
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
          echo "Deploy realizado com sucesso!"

